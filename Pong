package pong;

import javax.swing.JFrame;

/**
 *
 * @author Brett_Caban
 */
public class Pong {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
         GameFrame frame = new GameFrame();
        //sets up Jframe
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
    
}
//-----------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Brett_Caban
 */
public class Table extends JPanel implements ActionListener {

    private ArrayList<GameObject> tableObjects = new ArrayList<>();
    private Padels padel1;
    private Padels2 padel2;
    private Balls ball;
    private Timer ballTimer;
    private ControlFrame controls;
    private StatusPanel stats;
    private int P2points = 0;
    private int P1points = 0;
    private boolean gameOn = false;
    

    public Table() {
        setBackground(Color.BLACK);
        setVisible(true);
        ballTimer = new Timer(60, new TimerListener());
        setPreferredSize(new Dimension(800, 500));
        addKeyListener(new KeyListener());
        setFocusable(true);
    }

    public void gameOver() {//method that checks if game is over or not
        gameOn = false;
        getTableObjects().removeAll(getTableObjects());
    }

    /**
     * @return the tableObjects
     */
    public ArrayList<GameObject> getTableObjects() {
        return tableObjects;
    }
    
    public void addTableObject(GameObject go) {
        getTableObjects().add(go);
    }

    protected void paintComponent(Graphics g) { //paintComponent 
        super.paintComponent(g);
        if (gameOn == false) {
            g.setColor(Color.WHITE);
            g.drawString("Press start to play, Player 1 uses the 'w' & 's' keys, Player 2 uses up & down keys ", 250, 250);

        } else if (gameOn == true){
            g.setColor(Color.WHITE);
            g.drawLine(400, 0, 400, 500);
            int ballX = ball.getLocation().x;
        int ballY = ball.getLocation().y;
        }
        
     
        getTableObjects().stream().filter((game) -> (game.isVisible())).forEach((game) -> {
            game.draw(g);
        });
        repaint();
        
        
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == controls.getStart() && gameOn == false) {
            gameOn = true;
            
            padel1 = new Padels(800, 500);
            tableObjects.add(getPadel1());
            getPadel1().setVisible(true);

            padel2 = new Padels2(800, 500);
            tableObjects.add(getPadel2());
            getPadel2().setVisible(true);

            ball = new Balls();
            tableObjects.add(getBall());//Might need Balls instead of Ball
            TimerListener bListener = new TimerListener();
            ballTimer = new Timer(60, bListener);
            getBall().setVisible(true);
            
            ballTimer.start();
            
            this.requestFocus();

        }

        if (ae.getSource() == controls.getExit()) {//if user is finished and clicks stop. Program shuts off
            System.exit(0);
        }
        
        if(ae.getSource() == controls.getRestart() && gameOn == true) {
            tableObjects.removeAll(tableObjects);
            ballTimer.stop();
            stats.P1score.setText("Player 1: "+String.valueOf(0));
            stats.P2score.setText("Player 2: "+String.valueOf(0));
            
            padel1 = new Padels(800, 500);
            tableObjects.add(getPadel1());
            getPadel1().setVisible(true);

            padel2 = new Padels2(800, 500);
            tableObjects.add(getPadel2());
            getPadel2().setVisible(true);

            ball = new Balls();
            tableObjects.add(getBall());
            ballTimer = new Timer(60, new TimerListener());
            getBall().setVisible(true);
            ballTimer.start();
            
            this.requestFocus();
            
        }
        
    }

    /**
     * @return the P2points
     */
    public int getP2points() {
        return P2points;
    }

    /**
     * @return the P1points
     */
    public int getP1points() {
        return P1points;
    }
    
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            if(gameOn == true){
                //ballTimer.start();
                ball.move();
                if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel1.getLocation().x, 
                        padel1.getLocation().y, padel1.getWidth(), padel1.getLength())) {
                    if (ball.getxSpeed() > 0) {
                        ball.setxSpeed(-ball.getxSpeed());
                        if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel1.getLocation().x, 
                                padel1.getLocation().y, padel1.getWidth(), padel1.getLength() / 3)) {
                            ball.setySpeed(ball.getySpeed() - 5);
                            if (ball.getySpeed() < -35) ball.setySpeed(35);
                        }
                        if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel1.getLocation().x, 
                                padel1.getLocation().y + padel1.getLength() * 2 / 3, padel1.getWidth(), padel1.getLength() / 3)) {
                            ball.setySpeed(ball.getySpeed() + 5);
                            if (ball.getySpeed() > 35) ball.setySpeed(35);
                        }
                    }
                }
                    
                if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel2.getLocation().x, 
                        padel2.getLocation().y, padel2.getWidth(), padel2.getLength())) {
                    if (ball.getxSpeed() < 0) {
                        ball.setxSpeed(-ball.getxSpeed());
                        if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel2.getLocation().x, 
                                padel2.getLocation().y, padel2.getWidth(), padel2.getLength() / 3)) {
                            ball.setySpeed(ball.getySpeed() - 5);
                            if (ball.getySpeed() < -35) ball.setySpeed(35);
                        }
                        if (rectCollision(ball.getLocation().x, ball.getLocation().y, 20, 20, padel2.getLocation().x, 
                                padel2.getLocation().y + padel2.getLength() * 2 / 3, padel2.getWidth(), padel2.getLength() / 3)) {
                            ball.setySpeed(ball.getySpeed() + 5);
                            if (ball.getySpeed() > 35) ball.setySpeed(35);
                        }
                }
                }
            }
             if(ball.getPlayer1pts() == 1){
            stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
        }
             else if(ball.getPlayer1pts() == 2){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 3){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 4){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 5){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 6){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 7){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 8){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             else if(ball.getPlayer1pts() == 9){
             stats.P1score.setText("Player 1: "+String.valueOf(ball.getPlayer1pts()));
             }
             

             if(ball.getPlayer2pts() == 1){
            stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
        }
             else if(ball.getPlayer2pts() == 2){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 3){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 4){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 5){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 6){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 7){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 8){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
             else if(ball.getPlayer2pts() == 9){
             stats.P2score.setText("Player 2: "+String.valueOf(ball.getPlayer2pts()));
             }
            
            
        }
            }

    /**
     * @param controls the controls to set
     */
    public void setControls(ControlFrame controls) {
        this.controls = controls;
    }

    /**
     * @param stats the stats to set
     */
    public void setStats(StatusPanel stats) {
        this.stats = stats;
    }

    /**
     * @param tableObjects the tableObjects to set
     */
    public void setTableObjects(ArrayList<GameObject> tableObjects) {
        this.tableObjects = tableObjects;
    }

    /**
     * @return the padel1
     */
    public Padels getPadel1() {
        return padel1;
    }

    /**
     * @return the padel2
     */
    public Padels2 getPadel2() {
        return padel2;
    }

    /**
     * @return the ball
     */
    public Balls getBall() {
        return ball;
    }

    /**
     * @param ball the ball to set
     */
    public void setBall(Balls ball) {
        this.ball = ball;
    }

    

    private class KeyListener extends KeyAdapter {

        @Override
        public void keyTyped(KeyEvent ke) {
            

        }

        @Override
        public void keyPressed(KeyEvent ke) {
            if (gameOn = true) {
                int key = ke.getKeyCode();
                if (key == KeyEvent.VK_W) {//if key equals right key pressed  it moves lasercanon to the right
                    getPadel1().moveUp();
                    repaint();
                } else if (key == KeyEvent.VK_S) {
                    getPadel1().moveDown();
                    repaint();
                } 
                
                if(gameOn == true){
                int key2 = ke.getKeyCode();
               if (key2 == KeyEvent.VK_I) {
                    getPadel2().Up();
                    repaint();
                    
                } else if (key2 == KeyEvent.VK_K) {
                    getPadel2().Down();
                    repaint();
                }
               
                else if (key2 == KeyEvent.WINDOW_EVENT_MASK &&key2 == KeyEvent.VK_G){
                    
                }
        }
            }
        }
        

        @Override
        public void keyReleased(KeyEvent ke) {

        }

    }
    
   
    @Override
    public String toString() {
        String Table = super.toString() + " ";
        return Table;
    }
    
    public boolean rectCollision(int r1x, int r1y, int r1w, int r1h, int r2x, int r2y, int r2w, int r2h) {
        return (isBetween(r1x, r2x, r2x + r2w)
                || isBetween(r1x + r1w, r2x, r2x + r2w))
                && (isBetween(r1y, r2y, r2y + r2h)
                || isBetween(r1y + r1h, r2y, r2y + r2h)); // keeps the lasercanon from leaving the game
    }
    
     public boolean isBetween(int a, int b, int c) {
        return (a >= b && a <= c);
    }
     
     
}
//-----------------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

/**
 *
 * @author Brett_Caban
 */
public class Balls extends GameObject{
    private int xSpeed = 0;
    private int ySpeed = 0;
    private int Player1pts;
    private int Player2pts;
    private Table stat;//Status into Table
    
    
    public Balls(){
        xSpeed = 15;//originally was 15
        ySpeed = 15;//originally was 15
        Player1pts = 0;
        Player2pts = 0;
        getLocation().x = 390;//set speed and location and set it to false until another method calls for it
        getLocation().y = 250;     
        setVisible(true);
    }
    
    public void draw(Graphics g){
        g.setColor(Color.WHITE);
        g.fillOval(getLocation().x, getLocation().y, 20, 20);
    }
    
     public void moveX()
    {
        
        getLocation().x += getxSpeed();
        
        if(getLocation().x < 0 && getxSpeed() < 0){
            Player1pts++;
       
       Random rand1 = new Random();
       
       int randNum = rand1.nextInt(2);
       
       if(randNum == 0){
           getLocation().x = 390;
           getLocation().y = 250;
                setxSpeed(15);
                setySpeed(-15);
       }
       
        if(randNum == 1){
         getLocation().x = 390;
           getLocation().y = 250;
                setxSpeed(15);
                setySpeed(15);  
       }
        }
        else if(getLocation().x > 800 - 30 && getxSpeed() > 0){
            Player2pts++;
            Random rand2 = new Random();
       
       int randNum2 = rand2.nextInt(2);
       
       if(randNum2 == 0){
           getLocation().x = 390;
           getLocation().y = 250;
                setxSpeed(-15);
                setySpeed(-15);
       }
       
        if(randNum2 == 1){
         getLocation().x = 390;
           getLocation().y = 250;
                setxSpeed(-15);
                setySpeed(15);  
       }
        }
        
       
    }
     
     public void moveY()
    {
        getLocation().y += getySpeed(); //dy = ySpeed
        
       if( (getLocation().y < 0 && getySpeed() < 0) || (getLocation().y > 500 - 30 && getySpeed() > 0 )){
            setySpeed(-getySpeed());
       }    
       
    }  
    
    public void move(){//method that sets speed and location to control direction of projectile
       moveX();
       moveY();
       
    if( getPlayer1pts() == 9){
        P1win();
         
    }
    else if(getPlayer2pts() == 9){
        System.out.println("Player 2 wins!");
         getLocation().x = 390;
         getLocation().y = 250;
            setxSpeed(0);
            setySpeed(0);
    }
        
    }
    public void P1win(){
        System.out.println("Player 1 wins!");
         getLocation().x = 390;
         getLocation().y = 250;
         setxSpeed(0);
         setySpeed(0);
    }
    
    public void P2win(){
         System.out.println("Player 2 wins!");
         getLocation().x = 390;
         getLocation().y = 250;
         setxSpeed(0);
         setySpeed(0);
    }
    
    public void startMove(){
        Random rand = new Random();
            
            boolean start = false;
            
            int randNum = rand.nextInt(1);
            
            if(randNum == 0){
                 move();
            }
    }
    
    public String toString(){
        String ballProps = super.toString() + getLocation().x + " " + getLocation().y + " " + getxSpeed()+ " "+getySpeed();
        return ballProps;
    }

    /**
     * @return the Player1pts
     */
    public int getPlayer1pts() {
        return Player1pts;
    }

    /**
     * @return the Player2pts
     */
    public int getPlayer2pts() {
        return Player2pts;
    }

    /**
     * @param Player1pts the Player1pts to set
     */
    public void setPlayer1pts(int Player1pts) {
        this.Player1pts = Player1pts;
    }

    /**
     * @param Player2pts the Player2pts to set
     */
    public void setPlayer2pts(int Player2pts) {
        this.Player2pts = Player2pts;
    }

    /**
     * @return the xSpeed
     */
    public int getxSpeed() {
        return xSpeed;
    }

    /**
     * @param xSpeed the xSpeed to set
     */
    public void setxSpeed(int xSpeed) {
        this.xSpeed = xSpeed;
    }

    /**
     * @return the ySpeed
     */
    public int getySpeed() {
        return ySpeed;
    }

    /**
     * @param ySpeed the ySpeed to set
     */
    public void setySpeed(int ySpeed) {
        this.ySpeed = ySpeed;
    }
}
//------------------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Brett_Caban
 */
public class Padels extends GameObject {
    
    private final int pnlWidth; 
    private final int pnlHeight;
    private final int Length = 50;
    private final int Width = 20;
    private final int speed = 30;
    
    public Padels(int panelWidth, int panelHeight) { 
        super();
        setVisible(true);
        getLocation().x = panelWidth - 20;
        getLocation().y = panelHeight - 250;// This is the padel on the right. Do not change
        pnlWidth = panelWidth;
        pnlHeight = panelHeight;
    }
    
     public String toString() {
        String Padel = super.toString() + " " + pnlHeight + " " + pnlWidth + " " + getLocation().x + " " + getLocation().y + " " + speed;
        return Padel;
    }
     
     public void draw(Graphics g){
          g.setColor(Color.WHITE);
        g.fillRect(getLocation().x, getLocation().y, getWidth(), getLength());
        setVisible(true);
     }
    
     public void moveUp(){
         getLocation().y = (getLocation().y - speed);

        if (getLocation().y <= 0) {
            getLocation().y = 0;
        }
     }
     
     public void moveDown(){
            getLocation().y = (getLocation().y + speed);

        if (getLocation().y >= pnlHeight - getLength()) {
            getLocation().y = pnlHeight - getLength();
        }
     }

    /**
     * @return the Length
     */
    public int getLength() {
        return Length;
    }

    /**
     * @return the Width
     */
    public int getWidth() {
        return Width;
    }
}
//---------------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Brett_Caban
 */
public class Padels2 extends GameObject {
    
    private final int pnlWidth; 
    private final int pnlHeight;
    private final int Length = 50;
    private final int Width = 20;
    private final int speed = 30;
    
    public Padels2(int panelWidth, int panelHeight) { 
        super();
        setVisible(true);
        getLocation().x = panelWidth - panelWidth; //panelWidth = 800
        getLocation().y = panelHeight - 250;
        pnlWidth = panelWidth;
        pnlHeight = panelHeight;
    }
    
     public String toString() {
        String Padel = super.toString() + " " + pnlHeight + " " + pnlWidth + " " + getLocation().x + " " + getLocation().y + " " + speed;
        return Padel;
    }
     
     public void draw(Graphics g){
          g.setColor(Color.WHITE);
        g.fillRect(getLocation().x, getLocation().y, getWidth(), getLength());
        setVisible(true);
     }
    
     public void Up(){
            getLocation().y = (getLocation().y - speed);

        if (getLocation().y <= 0) {
            getLocation().y = 0;
        }
        }
       
     
     public void Down(){
         getLocation().y = (getLocation().y + speed);

        if (getLocation().y >= pnlHeight - getLength()) {
            getLocation().y = pnlHeight - getLength();
     }
 }

    /**
     * @return the Length
     */
    public int getLength() {
        return Length;
    }

    /**
     * @return the Width
     */
    public int getWidth() {
        return Width;
    }
}
//-----------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 *
 * @author Brett_Caban
 */
public class ControlFrame extends JPanel {
    private JButton Exit;
    private JButton Start;
    private JButton Restart;
    private Table table;
    
    
    public ControlFrame(){
        setSize(100,600);
        setLayout( new FlowLayout());
        setBackground(Color.BLUE);
        setVisible(true);
        Exit = new JButton("Exit");
        Start = new JButton("Start");
        Restart = new JButton("Restart");
        
        add(Exit);
        add(Start);
        add(Restart);
    }

    /**
     * @return the Exit
     */
    public JButton getExit() {
        return Exit;
    }

   
    
    /**
     * @return the Start
     */
    public JButton getStart() {
        return Start;
    }
   

    /**
     * @return the Restart
     */
    public JButton getRestart() {
        return Restart;
    }


    /**
     * @return the table
     */
    public Table getTable() {
        return table;
    }

  
    public void setTable(Table table) {
        this.table = table;
        Start.addActionListener(table);
        Exit.addActionListener(table);
        Restart.addActionListener(table);
        
       
    }
    
    
    
}
//----------------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.JFrame;

/**
 *
 * @author Brett_Caban
 */
public class GameFrame extends JFrame {
    
    public GameFrame(){
     Table panel = new Table();    
    setLayout(new BorderLayout());
    setResizable(false);
    
  
    panel.setBackground(Color.BLACK);
    add(panel, BorderLayout.CENTER);
    
    StatusPanel stats = new StatusPanel();
    stats.setBackground(Color.BLUE);
    add(stats, BorderLayout.NORTH);
    panel.setStats(stats);
    
    ControlFrame control = new ControlFrame();
    control.setBackground(Color.BLUE);
    add(control, BorderLayout.SOUTH);
    panel.setControls(control);
    control.setTable(panel);
    
    pack();
    }
}
//-------------------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.FlowLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Brett_Caban
 */
public class StatusPanel extends JPanel {
    
    JLabel P1score, P2score;;
    
    public StatusPanel(){
         setSize(100,600);
        setLayout(new FlowLayout());
        setBackground(Color.BLUE);
        setVisible(true);
        P1score = new JLabel("Player 1: ");
        P2score = new JLabel("Player 2: ");
        add(P1score);
        add(P2score);
    }
    
}
//--------------------------------------------------------------------------------------------------------------
package pong;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Brett_Caban
 */
public class PointDisplay extends GameObject implements ActionListener {

    private int points;//delcare variables
    private Timer ptTime;
    private Table score;

    PointDisplay(int points, Table score, Color color) {//initialize
        this.points = points;
        this.score = score;
        ptTime = new Timer(1000, this);
        ptTime.start();
        setColor(color);
        setLocation(new Point());
    }

    @Override
    public void draw(Graphics g) {//drawpoints and gets color of designated alien
        g.setColor(getColor());

        g.drawString(String.valueOf(points), getLocation().x, getLocation().y);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {//stops points and removes game objects
        ptTime.stop();
        score.getTableObjects().remove(this);
    }

}
